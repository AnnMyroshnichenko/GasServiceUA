// <auto-generated />
using System;
using GasServiceUA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GasServiceUA.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240705135505_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GasServiceUA.Models.Bill", b =>
                {
                    b.Property<int>("BillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillsId"));

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MeterReadingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("BillsId")
                        .HasName("PK__Bills__CE7F6864F1E665F9");

                    b.HasIndex("MeterReadingsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("GasServiceUA.Models.MeterReading", b =>
                {
                    b.Property<int>("MeterReadingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterReadingsId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<long>("EndMeterReading")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<long>("StartMeterReading")
                        .HasColumnType("bigint");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("MeterReadingsId")
                        .HasName("PK__MeterRea__1D5EBCAADAA07D6C");

                    b.HasIndex("UsersId");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("GasServiceUA.Models.Payment", b =>
                {
                    b.Property<int>("PaymentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentsId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("PaymentsId")
                        .HasName("PK__Payments__FD75744AD43A323D");

                    b.HasIndex("UsersId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GasServiceUA.Models.Tariff", b =>
                {
                    b.Property<int>("TariffsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TariffsId"));

                    b.Property<float>("CostPerGasUnit")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("TariffsId")
                        .HasName("PK__Tariffs__69CF08832923FE6A");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("GasServiceUA.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<short>("BuildingNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityDistrict")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TariffsId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0760BE5CCF");

                    b.HasIndex("TariffsId");

                    b.HasIndex(new[] { "AccountNumber" }, "users_accountnumber_unique")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("GasServiceUA.Models.Bill", b =>
                {
                    b.HasOne("GasServiceUA.Models.MeterReading", "MeterReadings")
                        .WithMany("Bills")
                        .HasForeignKey("MeterReadingsId")
                        .HasConstraintName("bills_meterreadingsid_foreign");

                    b.HasOne("GasServiceUA.Models.User", "Users")
                        .WithMany("Bills")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("bills_usersid_foreign");

                    b.Navigation("MeterReadings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GasServiceUA.Models.MeterReading", b =>
                {
                    b.HasOne("GasServiceUA.Models.User", "Users")
                        .WithMany("MeterReadings")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("meterreadings_usersid_foreign");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GasServiceUA.Models.Payment", b =>
                {
                    b.HasOne("GasServiceUA.Models.User", "Users")
                        .WithMany("Payments")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("payments_usersid_foreign");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GasServiceUA.Models.User", b =>
                {
                    b.HasOne("GasServiceUA.Models.Tariff", "Tariffs")
                        .WithMany("Users")
                        .HasForeignKey("TariffsId")
                        .IsRequired()
                        .HasConstraintName("users_tariffsid_foreign");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("GasServiceUA.Models.MeterReading", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("GasServiceUA.Models.Tariff", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GasServiceUA.Models.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("MeterReadings");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
